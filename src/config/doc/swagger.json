{
  "openapi": "3.0.3",
  "info": {
    "title": "Veterinary Clinic API",
    "version": "1.0.11",
    "description": "Veterinary Clinic API for managing veterinary services",
    "contact": {
      "email": "felipe.comarques1208@gmail.com",
      "name": "Felipe da Costa Marques",
      "url": "https://github.com/felipecomarques"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/felipecomarques/library-management-api/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Everything about authenticate tutors"
    },
    {
      "name": "Tutor",
      "description": "Everything about tutors"
    },
    {
      "name": "Pet",
      "description": "Everything about pets"
    }
  ],
  "paths": {
    "/auth": {
      "summary": "Everything about authenticate tutors",
      "description": "Post operation for authentication",
      "post": {
        "summary": "Create a new token",
        "description": "This route will create an access token from a tutor's data. This token is generated by JWT and will expire after one hour. To authenticate, click on the 'Authorize' button and insert the token",
        "operationId": "createToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Auth"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token created successfully"
          },
          "400": {
            "description": "Email or password is incorrect"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/tutor": {
      "summary": "Everything about tutors",
      "description": "CRUD operations for tutors",
      "get": {
        "summary": "Retrieves all tutors",
        "description": "This route will return all tutors registered in the application. All fields will be displayed, including the password (which is encrypted with bcrypt) and also all associated pets",
        "operationId": "readTutors",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all tutors"
          },
          "401": {
            "description": "Missing token or invalid token"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Tutor"
        ]
      },
      "post": {
        "summary": "Create a new tutor",
        "description": "This route will create a new tutor. The password will be automatically encrypted. All fields are required and an email cannot be repeated",
        "operationId": "createTutor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tutor"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created tutor"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Missing token or invalid token"
          },
          "409": {
            "description": "The email already exists"
          },
          "422": {
            "description": "Field validation error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Tutor"
        ]
      }
    },
    "/tutor/{id}": {
      "patch": {
        "summary": "Partially update a tutor",
        "description": "This route will update partially  an existing tutor. The password will be automatically encrypted. An email cannot be repeated",
        "operationId": "patchTutor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of tutor to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tutor"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated tutor"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Missing token or invalid token"
          },
          "409": {
            "description": "The email already exists"
          },
          "422": {
            "description": "Field validation error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Tutor"
        ]
      },
      "put": {
        "summary": " Updates a tutor",
        "description": "This route will update an existing tutor. The password will be automatically encrypted. All fields are required and an email cannot be repeated",
        "operationId": "updateTutor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of tutor to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tutor"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated tutor"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Missing token or invalid token"
          },
          "409": {
            "description": "The email already exists"
          },
          "422": {
            "description": "Field validation error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Tutor"
        ]
      },
      "delete": {
        "summary": "Deletes a tutor",
        "description": "This route will delete an existing tutor. It is not possible to delete a tutor that has associated pets. This action is not reversible",
        "operationId": "deleteTutor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of tutor to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted tutor"
          },
          "401": {
            "description": "Missing token or invalid token"
          },
          "409": {
            "description": "Conflict between dependencies (did you try to delete a tutor with an associated pet?)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Tutor"
        ]
      }
    },
    "/pet/{tutorId}": {
      "summary": "Everything about pet",
      "description": "CRUD operations for tutors",
      "post": {
        "summary": "Create a new pet",
        "description": "This route will create a pet associated with a tutor. All fields are required",
        "operationId": "createPet",
        "parameters": [
          {
            "name": "tutorId",
            "in": "path",
            "description": "ID of tutor to create a new pet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created pet"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Missing token or invalid token"
          },
          "422": {
            "description": "Field validation error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Pet"
        ]
      }
    },
    "/pet/{petId}/tutor/{tutorId}": {
      "patch": {
        "summary": "Partially update a pet",
        "description": "This route will update partially a pet associated with a tutor",
        "operationId": "patchPet",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to patch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tutorId",
            "in": "path",
            "description": "ID of tutor to patch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated pet"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Missing token or invalid token"
          },
          "422": {
            "description": "Field validation error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Pet"
        ]
      },
      "put": {
        "summary": " Updates a pet",
        "description": "This route will update a pet associated with a tutor. All fields are required",
        "operationId": "updatePet",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tutorId",
            "in": "path",
            "description": "ID of tutor to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated pet"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Missing token or invalid token"
          },
          "422": {
            "description": "Field validation error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Pet"
        ]
      },
      "delete": {
        "summary": " Deletes a pet",
        "description": "This route will delete an existing pet. This action is not reversible",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tutorId",
            "in": "path",
            "description": "ID of tutor to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted pet"
          },
          "401": {
            "description": "Missing token or invalid token"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Pet"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Auth": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "jhon.doe@email.com"
          },
          "password": {
            "type": "string",
            "example": "qwerty"
          }
        }
      },
      "Tutor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Jhon Doe"
          },
          "password": {
            "type": "string",
            "example": "qwerty"
          },
          "phone": {
            "type": "string",
            "example": 85989323895
          },
          "email": {
            "type": "string",
            "example": "jhon.doe@email.com"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "example": "1993-12-12T10:10:00.000Z"
          },
          "zipCode": {
            "type": "string",
            "example": 61760000
          }
        }
      },
      "Pet": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Lilo"
          },
          "species": {
            "type": "string",
            "example": "Dog"
          },
          "carry": {
            "type": "string",
            "example": "p"
          },
          "weight": {
            "type": "number",
            "example": 5
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "example": "1993-12-12T10:10:00.000Z"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}